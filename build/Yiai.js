// Generated by CoffeeScript 1.7.1
(function() {
  var Yiai, async, colors, fs, jquery, jsdom, mkdirp, path, request, yiai, _;

  _ = require('underscore');

  fs = require('fs');

  path = require('path');

  jsdom = require('jsdom');

  async = require('async');

  mkdirp = require('mkdirp');

  colors = require('colors');

  request = require('request');

  jquery = fs.readFileSync("../bower_components/jquery/jquery.min.js", "utf-8");

  Yiai = (function() {
    function Yiai() {}

    Yiai.prototype.list = {};

    Yiai.prototype.initConfig = function(config) {
      return this.filelist = config.filelist, this.dest = config.dest, this.origin = config.origin, this.patterns = config.patterns, config;
    };

    Yiai.prototype.process = function() {
      var lines, tasks;
      lines = this._lineBy(this.filelist);
      tasks = _.map(lines, (function(_this) {
        return function(path, index) {
          return function(next) {
            return request({
              uri: "" + _this.origin + path
            }, function(e, res, body) {
              _this.log(res.statusCode === 404, "fetch", path);
              _this.list[path] = {
                "statusCode": res.statusCode
              };
              if (res.statusCode === 404) {
                return next(null, index);
              }
              return jsdom.env({
                html: body,
                src: [jquery],
                done: function(error, window) {
                  _this.check(path, window, res);
                  _this.replace(path, window, res);
                  window.close();
                  return next(null, index);
                }
              });
            });
          };
        };
      })(this));
      return async.parallel(tasks, (function(_this) {
        return function(err, results) {
          return console.log(results, _this.list);
        };
      })(this));
    };

    Yiai.prototype.check = function(path, window, res) {
      return this.list[path].check = _.compact(_.map(this.patterns, function(e, i) {
        if (_.every(_.map(e.check, function(f, j) {
          return f(path, window, res);
        }))) {
          return i;
        }
      }));
    };

    Yiai.prototype.replace = function(path, window, res) {
      var $, destpath, ptn, str;
      $ = window.$;
      ptn = this.list[path].check;
      _.map(ptn, (function(_this) {
        return function(e, i) {
          return _.map(_this.patterns[e].replace, function(replace, target) {
            var $tar;
            $tar = $(target);
            return $tar.html(replace($tar.html(), $));
          });
        };
      })(this));
      str = window.document.innerHTML;
      destpath = "" + this.dest + path;
      this._mkdir(destpath, "mkdir");
      return this._writeFile(destpath, str, "write");
    };

    Yiai.prototype._lineBy = function(filename, encoding) {
      var lines, str;
      if (encoding == null) {
        encoding = "utf-8";
      }
      str = fs.readFileSync(filename, encoding);
      lines = str.split(String.fromCharCode(10));
      return _.compact(lines);
    };

    Yiai.prototype._dirname = function(p) {
      if (path.extname(p) !== '') {
        p = path.dirname(p);
      }
      return p;
    };

    Yiai.prototype._reqfile = function(p) {
      if (/\/$/.test(p)) {
        p = "" + p + "index.html";
      }
      return p;
    };

    Yiai.prototype._mkdir = function(path, cmd) {
      mkdirp.sync(this._dirname(path));
      return this.log(0, cmd, path);
    };

    Yiai.prototype._writeFile = function(path, str, cmd) {
      path = this._reqfile(path);
      fs.writeFileSync(path, str);
      return this.log(0, cmd, path);
    };

    Yiai.prototype.log = function(error, cmd, path) {
      var stat;
      stat = error ? "NG".red : "OK".green;
      return console.log("Yiai " + ("" + stat + " ") + ("" + cmd + " ").magenta + path);
    };

    return Yiai;

  })();

  yiai = new Yiai;

  require("./Yiaifile")(yiai);

  yiai.process();

}).call(this);
